# Copyright (c) 2025 anicatpro
# Author: anicatpro (Paul Afanasev)
# License: MIT

version: "3.8"

services:
  # ---- Traefik: обратный proxy и SSL ----
  traefik:
    image: traefik:v2.11
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=your@email.com"            # свой email!
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    restart: always

  # ---- Zammad сервисы ----
  zammad-postgresql:
    image: postgres:17.5-alpine
    environment:
      POSTGRES_DB: zammad_production
      POSTGRES_USER: zammad
      POSTGRES_PASSWORD: zammad
    restart: always
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  zammad-redis:
    image: redis:7.4.3-alpine
    restart: always
    volumes:
      - redis-data:/data

  zammad-memcached:
    image: memcached:1.6.38-alpine
    command: memcached -m 256M
    restart: always

  zammad-elasticsearch:
    image: bitnami/elasticsearch:8.18.0
    restart: always
    environment:
      ELASTICSEARCH_ENABLE_SECURITY: "true"
      ELASTICSEARCH_SKIP_TRANSPORT_TLS: "true"
      ELASTICSEARCH_ENABLE_REST_TLS: "false"
      ELASTICSEARCH_PASSWORD: zammad
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      cluster.routing.allocation.disk.watermark.low: 1gb
      cluster.routing.allocation.disk.watermark.high: 500mb
      cluster.routing.allocation.disk.watermark.flood_stage: 200mb
      cluster.info.update.interval: 1m
    volumes:
      - elasticsearch-data:/bitnami/elasticsearch/data
    ulimits:
      memlock:
        soft: 262144
        hard: 262144
    mem_limit: 1500m

  zammad-storage:
    image: busybox
    command: sh
    volumes:
      - zammad-storage:/opt/zammad/storage

  zammad-railsserver:
    image: ghcr.io/zammad/zammad:6.5.0-75
    environment: &zammad_env
      MEMCACHE_SERVERS: zammad-memcached:11211
      POSTGRESQL_DB: zammad_production
      POSTGRESQL_HOST: zammad-postgresql
      POSTGRESQL_USER: zammad
      POSTGRESQL_PASS: zammad                                            
      POSTGRESQL_PORT: "5432"
      POSTGRESQL_OPTIONS: ?pool=50
      REDIS_URL: redis://zammad-redis:6379
      S3_URL: null
      BACKUP_DIR: /var/tmp/zammad
      BACKUP_TIME: 03:00
      HOLD_DAYS: "10"
      TZ: Europe/Moscow
      ELASTICSEARCH_ENABLED: "true"
      ELASTICSEARCH_SCHEMA: http
      ELASTICSEARCH_HOST: zammad-elasticsearch
      ELASTICSEARCH_PORT: "9200"
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PASS: zammad
      RAILS_TRUSTED_PROXIES: "172.16.0.0/12,127.0.0.1"
      SESSION_COOKIE_SECURE: "true"
    restart: always
    depends_on:
      - zammad-memcached
      - zammad-postgresql
      - zammad-redis
      - zammad-elasticsearch
    volumes:
      - zammad-storage:/opt/zammad/storage

  zammad-nginx:
    image: ghcr.io/zammad/zammad:6.5.0-75
    command: zammad-nginx
    environment: *zammad_env
    restart: always
    expose:
      - "8080"
    depends_on:
      - zammad-railsserver
    volumes:
      - zammad-storage:/opt/zammad/storage
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zammad.rule=Host(`zammad.example.com`)"    # <== свой домен!
      - "traefik.http.routers.zammad.entrypoints=websecure"
      - "traefik.http.routers.zammad.tls.certresolver=le"
      - "traefik.http.services.zammad.loadbalancer.server.port=8080"

  zammad-scheduler:
    image: ghcr.io/zammad/zammad:6.5.0-75
    command: zammad-scheduler
    environment: *zammad_env
    restart: always
    depends_on:
      - zammad-railsserver
    volumes:
      - zammad-storage:/opt/zammad/storage

  zammad-websocket:
    image: ghcr.io/zammad/zammad:6.5.0-75
    command: zammad-websocket
    environment: *zammad_env
    restart: always
    depends_on:
      - zammad-railsserver
    volumes:
      - zammad-storage:/opt/zammad/storage

  zammad-backup:
    image: ghcr.io/zammad/zammad:6.5.0-75
    command: zammad-backup
    environment: *zammad_env
    restart: always
    depends_on:
      - zammad-memcached
      - zammad-postgresql
      - zammad-redis
    volumes:
      - zammad-backup:/var/tmp/zammad
      - zammad-storage:/opt/zammad/storage:ro

  zammad-init:
    image: ghcr.io/zammad/zammad:6.5.0-75
    command: zammad-init
    environment: *zammad_env
    restart: on-failure
    depends_on:
      - zammad-postgresql
    user: 0:0
    volumes:
      - zammad-storage:/opt/zammad/storage

volumes:
  zammad-storage:
  zammad-backup:
  elasticsearch-data:
  postgresql-data:
  redis-data:
  letsencrypt:
    driver: local
